use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount};

declare_id!("YourProgramID"); 

#[program]
pub mod nft_marketplace {
    use super::*;

    pub fn mint_nft(ctx: Context<MintNft>, price: u64) -> Result<()> {
        let buyer = &ctx.accounts.buyer;
        let seller = &ctx.accounts.seller;
        let nft_token_account = &ctx.accounts.nft_token_account;
        let gabu_token_account = &ctx.accounts.gabu_token_account;

      
        let gabu_amount = price;
        let cpi_accounts = token::Transfer {
            from: gabu_token_account.to_account_info(),
            to: seller.to_account_info(),
            authority: buyer.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.clone();
        token::transfer(CpiContext::new(cpi_program, cpi_accounts), gabu_amount)?;

        let cpi_accounts = token::MintTo {
            mint: nft_token_account.to_account_info(),
            to: buyer.to_account_info(),
            authority: seller.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.clone();
        token::mint_to(CpiContext::new(cpi_program, cpi_accounts), 1)?;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct MintNft<'info> {
    #[account(mut)]
    pub buyer: Signer<'info>,
    #[account(mut)]
    pub seller: AccountInfo<'info>,
    #[account(mut)]
    pub nft_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub gabu_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
}
